// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockHashPassword is an autogenerated mock type for the HashPassword type
type MockHashPassword struct {
	mock.Mock
}

type MockHashPassword_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashPassword) EXPECT() *MockHashPassword_Expecter {
	return &MockHashPassword_Expecter{mock: &_m.Mock}
}

// HashedPassword provides a mock function with given fields: password
func (_m *MockHashPassword) HashedPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashedPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHashPassword_HashedPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashedPassword'
type MockHashPassword_HashedPassword_Call struct {
	*mock.Call
}

// HashedPassword is a helper method to define mock.On call
//   - password string
func (_e *MockHashPassword_Expecter) HashedPassword(password interface{}) *MockHashPassword_HashedPassword_Call {
	return &MockHashPassword_HashedPassword_Call{Call: _e.mock.On("HashedPassword", password)}
}

func (_c *MockHashPassword_HashedPassword_Call) Run(run func(password string)) *MockHashPassword_HashedPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHashPassword_HashedPassword_Call) Return(hashed string, err error) *MockHashPassword_HashedPassword_Call {
	_c.Call.Return(hashed, err)
	return _c
}

func (_c *MockHashPassword_HashedPassword_Call) RunAndReturn(run func(string) (string, error)) *MockHashPassword_HashedPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: hashed, password
func (_m *MockHashPassword) VerifyPassword(hashed string, password string) error {
	ret := _m.Called(hashed, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashed, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHashPassword_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type MockHashPassword_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - hashed string
//   - password string
func (_e *MockHashPassword_Expecter) VerifyPassword(hashed interface{}, password interface{}) *MockHashPassword_VerifyPassword_Call {
	return &MockHashPassword_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", hashed, password)}
}

func (_c *MockHashPassword_VerifyPassword_Call) Run(run func(hashed string, password string)) *MockHashPassword_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockHashPassword_VerifyPassword_Call) Return(err error) *MockHashPassword_VerifyPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHashPassword_VerifyPassword_Call) RunAndReturn(run func(string, string) error) *MockHashPassword_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHashPassword creates a new instance of MockHashPassword. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashPassword(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashPassword {
	mock := &MockHashPassword{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
