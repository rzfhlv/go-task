// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/rzfhlv/go-task/pkg/jwt"
	mock "github.com/stretchr/testify/mock"

	model "github.com/rzfhlv/go-task/internal/model"
)

// MockJWTInterface is an autogenerated mock type for the JWTInterface type
type MockJWTInterface struct {
	mock.Mock
}

type MockJWTInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTInterface) EXPECT() *MockJWTInterface_Expecter {
	return &MockJWTInterface_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: user, jti
func (_m *MockJWTInterface) Generate(user model.User, jti string) (model.JWT, error) {
	ret := _m.Called(user, jti)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 model.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User, string) (model.JWT, error)); ok {
		return rf(user, jti)
	}
	if rf, ok := ret.Get(0).(func(model.User, string) model.JWT); ok {
		r0 = rf(user, jti)
	} else {
		r0 = ret.Get(0).(model.JWT)
	}

	if rf, ok := ret.Get(1).(func(model.User, string) error); ok {
		r1 = rf(user, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTInterface_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockJWTInterface_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - user model.User
//   - jti string
func (_e *MockJWTInterface_Expecter) Generate(user interface{}, jti interface{}) *MockJWTInterface_Generate_Call {
	return &MockJWTInterface_Generate_Call{Call: _e.mock.On("Generate", user, jti)}
}

func (_c *MockJWTInterface_Generate_Call) Run(run func(user model.User, jti string)) *MockJWTInterface_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.User), args[1].(string))
	})
	return _c
}

func (_c *MockJWTInterface_Generate_Call) Return(jwtModel model.JWT, err error) *MockJWTInterface_Generate_Call {
	_c.Call.Return(jwtModel, err)
	return _c
}

func (_c *MockJWTInterface_Generate_Call) RunAndReturn(run func(model.User, string) (model.JWT, error)) *MockJWTInterface_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: signedToken
func (_m *MockJWTInterface) ValidateToken(signedToken string) (*jwt.JWTClaim, error) {
	ret := _m.Called(signedToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.JWTClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.JWTClaim, error)); ok {
		return rf(signedToken)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.JWTClaim); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.JWTClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTInterface_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJWTInterface_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - signedToken string
func (_e *MockJWTInterface_Expecter) ValidateToken(signedToken interface{}) *MockJWTInterface_ValidateToken_Call {
	return &MockJWTInterface_ValidateToken_Call{Call: _e.mock.On("ValidateToken", signedToken)}
}

func (_c *MockJWTInterface_ValidateToken_Call) Run(run func(signedToken string)) *MockJWTInterface_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTInterface_ValidateToken_Call) Return(claims *jwt.JWTClaim, err error) *MockJWTInterface_ValidateToken_Call {
	_c.Call.Return(claims, err)
	return _c
}

func (_c *MockJWTInterface_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.JWTClaim, error)) *MockJWTInterface_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTInterface creates a new instance of MockJWTInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTInterface {
	mock := &MockJWTInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
