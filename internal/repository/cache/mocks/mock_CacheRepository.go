// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheRepository is an autogenerated mock type for the CacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

type MockCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheRepository) EXPECT() *MockCacheRepository_Expecter {
	return &MockCacheRepository_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: ctx, key
func (_m *MockCacheRepository) Del(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockCacheRepository_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheRepository_Expecter) Del(ctx interface{}, key interface{}) *MockCacheRepository_Del_Call {
	return &MockCacheRepository_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *MockCacheRepository_Del_Call) Run(run func(ctx context.Context, key string)) *MockCacheRepository_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheRepository_Del_Call) Return(_a0 int64, _a1 error) *MockCacheRepository_Del_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheRepository_Del_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockCacheRepository_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockCacheRepository) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheRepository_Expecter) Get(ctx interface{}, key interface{}) *MockCacheRepository_Get_Call {
	return &MockCacheRepository_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCacheRepository_Get_Call) Run(run func(ctx context.Context, key string)) *MockCacheRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheRepository_Get_Call) Return(_a0 string, _a1 error) *MockCacheRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheRepository_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockCacheRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, duration
func (_m *MockCacheRepository) Set(ctx context.Context, key string, value int64, duration time.Duration) error {
	ret := _m.Called(ctx, key, value, duration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, time.Duration) error); ok {
		r0 = rf(ctx, key, value, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value int64
//   - duration time.Duration
func (_e *MockCacheRepository_Expecter) Set(ctx interface{}, key interface{}, value interface{}, duration interface{}) *MockCacheRepository_Set_Call {
	return &MockCacheRepository_Set_Call{Call: _e.mock.On("Set", ctx, key, value, duration)}
}

func (_c *MockCacheRepository_Set_Call) Run(run func(ctx context.Context, key string, value int64, duration time.Duration)) *MockCacheRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCacheRepository_Set_Call) Return(_a0 error) *MockCacheRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_Set_Call) RunAndReturn(run func(context.Context, string, int64, time.Duration) error) *MockCacheRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheRepository creates a new instance of MockCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheRepository {
	mock := &MockCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
