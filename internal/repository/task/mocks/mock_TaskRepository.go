// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rzfhlv/go-task/internal/model"
	mock "github.com/stretchr/testify/mock"

	param "github.com/rzfhlv/go-task/pkg/param"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
	mock.Mock
}

type MockTaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskRepository) EXPECT() *MockTaskRepository_Expecter {
	return &MockTaskRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *MockTaskRepository) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockTaskRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTaskRepository_Expecter) Count(ctx interface{}) *MockTaskRepository_Count_Call {
	return &MockTaskRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockTaskRepository_Count_Call) Run(run func(ctx context.Context)) *MockTaskRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTaskRepository_Count_Call) Return(_a0 int64, _a1 error) *MockTaskRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_Count_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockTaskRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockTaskRepository) Create(ctx context.Context, _a1 model.Task) (model.Task, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) (model.Task, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) model.Task); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Task) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.Task
func (_e *MockTaskRepository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockTaskRepository_Create_Call {
	return &MockTaskRepository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockTaskRepository_Create_Call) Run(run func(ctx context.Context, _a1 model.Task)) *MockTaskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Task))
	})
	return _c
}

func (_c *MockTaskRepository_Create_Call) Return(_a0 model.Task, _a1 error) *MockTaskRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_Create_Call) RunAndReturn(run func(context.Context, model.Task) (model.Task, error)) *MockTaskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, userId
func (_m *MockTaskRepository) Delete(ctx context.Context, id int64, userId int64) error {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTaskRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - userId int64
func (_e *MockTaskRepository_Expecter) Delete(ctx interface{}, id interface{}, userId interface{}) *MockTaskRepository_Delete_Call {
	return &MockTaskRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id, userId)}
}

func (_c *MockTaskRepository_Delete_Call) Run(run func(ctx context.Context, id int64, userId int64)) *MockTaskRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockTaskRepository_Delete_Call) Return(_a0 error) *MockTaskRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskRepository_Delete_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockTaskRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id, userId
func (_m *MockTaskRepository) GetByID(ctx context.Context, id int64, userId int64) (model.Task, error) {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (model.Task, error)); ok {
		return rf(ctx, id, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) model.Task); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTaskRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - userId int64
func (_e *MockTaskRepository_Expecter) GetByID(ctx interface{}, id interface{}, userId interface{}) *MockTaskRepository_GetByID_Call {
	return &MockTaskRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id, userId)}
}

func (_c *MockTaskRepository_GetByID_Call) Run(run func(ctx context.Context, id int64, userId int64)) *MockTaskRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockTaskRepository_GetByID_Call) Return(_a0 model.Task, _a1 error) *MockTaskRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64, int64) (model.Task, error)) *MockTaskRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userId, _a2
func (_m *MockTaskRepository) GetByUserID(ctx context.Context, userId int64, _a2 param.Param) ([]model.Task, error) {
	ret := _m.Called(ctx, userId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, param.Param) ([]model.Task, error)); ok {
		return rf(ctx, userId, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, param.Param) []model.Task); ok {
		r0 = rf(ctx, userId, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, param.Param) error); ok {
		r1 = rf(ctx, userId, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTaskRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - _a2 param.Param
func (_e *MockTaskRepository_Expecter) GetByUserID(ctx interface{}, userId interface{}, _a2 interface{}) *MockTaskRepository_GetByUserID_Call {
	return &MockTaskRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userId, _a2)}
}

func (_c *MockTaskRepository_GetByUserID_Call) Run(run func(ctx context.Context, userId int64, _a2 param.Param)) *MockTaskRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(param.Param))
	})
	return _c
}

func (_c *MockTaskRepository_GetByUserID_Call) Return(_a0 []model.Task, _a1 error) *MockTaskRepository_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_GetByUserID_Call) RunAndReturn(run func(context.Context, int64, param.Param) ([]model.Task, error)) *MockTaskRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1, userId
func (_m *MockTaskRepository) Update(ctx context.Context, _a1 model.Task, userId int64) (model.Task, error) {
	ret := _m.Called(ctx, _a1, userId)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task, int64) (model.Task, error)); ok {
		return rf(ctx, _a1, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Task, int64) model.Task); ok {
		r0 = rf(ctx, _a1, userId)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Task, int64) error); ok {
		r1 = rf(ctx, _a1, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.Task
//   - userId int64
func (_e *MockTaskRepository_Expecter) Update(ctx interface{}, _a1 interface{}, userId interface{}) *MockTaskRepository_Update_Call {
	return &MockTaskRepository_Update_Call{Call: _e.mock.On("Update", ctx, _a1, userId)}
}

func (_c *MockTaskRepository_Update_Call) Run(run func(ctx context.Context, _a1 model.Task, userId int64)) *MockTaskRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Task), args[2].(int64))
	})
	return _c
}

func (_c *MockTaskRepository_Update_Call) Return(_a0 model.Task, _a1 error) *MockTaskRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_Update_Call) RunAndReturn(run func(context.Context, model.Task, int64) (model.Task, error)) *MockTaskRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskRepository creates a new instance of MockTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskRepository {
	mock := &MockTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
