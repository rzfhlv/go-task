// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskHandler is an autogenerated mock type for the TaskHandler type
type MockTaskHandler struct {
	mock.Mock
}

type MockTaskHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskHandler) EXPECT() *MockTaskHandler_Expecter {
	return &MockTaskHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: e
func (_m *MockTaskHandler) Create(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - e echo.Context
func (_e *MockTaskHandler_Expecter) Create(e interface{}) *MockTaskHandler_Create_Call {
	return &MockTaskHandler_Create_Call{Call: _e.mock.On("Create", e)}
}

func (_c *MockTaskHandler_Create_Call) Run(run func(e echo.Context)) *MockTaskHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTaskHandler_Create_Call) Return(err error) *MockTaskHandler_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskHandler_Create_Call) RunAndReturn(run func(echo.Context) error) *MockTaskHandler_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: e
func (_m *MockTaskHandler) Delete(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTaskHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - e echo.Context
func (_e *MockTaskHandler_Expecter) Delete(e interface{}) *MockTaskHandler_Delete_Call {
	return &MockTaskHandler_Delete_Call{Call: _e.mock.On("Delete", e)}
}

func (_c *MockTaskHandler_Delete_Call) Run(run func(e echo.Context)) *MockTaskHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTaskHandler_Delete_Call) Return(err error) *MockTaskHandler_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskHandler_Delete_Call) RunAndReturn(run func(echo.Context) error) *MockTaskHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: e
func (_m *MockTaskHandler) GetByID(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTaskHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - e echo.Context
func (_e *MockTaskHandler_Expecter) GetByID(e interface{}) *MockTaskHandler_GetByID_Call {
	return &MockTaskHandler_GetByID_Call{Call: _e.mock.On("GetByID", e)}
}

func (_c *MockTaskHandler_GetByID_Call) Run(run func(e echo.Context)) *MockTaskHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTaskHandler_GetByID_Call) Return(err error) *MockTaskHandler_GetByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskHandler_GetByID_Call) RunAndReturn(run func(echo.Context) error) *MockTaskHandler_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: e
func (_m *MockTaskHandler) GetByUserID(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskHandler_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTaskHandler_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - e echo.Context
func (_e *MockTaskHandler_Expecter) GetByUserID(e interface{}) *MockTaskHandler_GetByUserID_Call {
	return &MockTaskHandler_GetByUserID_Call{Call: _e.mock.On("GetByUserID", e)}
}

func (_c *MockTaskHandler_GetByUserID_Call) Run(run func(e echo.Context)) *MockTaskHandler_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTaskHandler_GetByUserID_Call) Return(err error) *MockTaskHandler_GetByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskHandler_GetByUserID_Call) RunAndReturn(run func(echo.Context) error) *MockTaskHandler_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: e
func (_m *MockTaskHandler) Update(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - e echo.Context
func (_e *MockTaskHandler_Expecter) Update(e interface{}) *MockTaskHandler_Update_Call {
	return &MockTaskHandler_Update_Call{Call: _e.mock.On("Update", e)}
}

func (_c *MockTaskHandler_Update_Call) Run(run func(e echo.Context)) *MockTaskHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTaskHandler_Update_Call) Return(err error) *MockTaskHandler_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskHandler_Update_Call) RunAndReturn(run func(echo.Context) error) *MockTaskHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskHandler creates a new instance of MockTaskHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskHandler {
	mock := &MockTaskHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
