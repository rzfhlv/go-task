// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rzfhlv/go-task/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRegisterUsecase is an autogenerated mock type for the RegisterUsecase type
type MockRegisterUsecase struct {
	mock.Mock
}

type MockRegisterUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterUsecase) EXPECT() *MockRegisterUsecase_Expecter {
	return &MockRegisterUsecase_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *MockRegisterUsecase) Register(ctx context.Context, _a1 model.Register) (model.User, model.JWT, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 model.User
	var r1 model.JWT
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Register) (model.User, model.JWT, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Register) model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Register) model.JWT); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(model.JWT)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.Register) error); ok {
		r2 = rf(ctx, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRegisterUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRegisterUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.Register
func (_e *MockRegisterUsecase_Expecter) Register(ctx interface{}, _a1 interface{}) *MockRegisterUsecase_Register_Call {
	return &MockRegisterUsecase_Register_Call{Call: _e.mock.On("Register", ctx, _a1)}
}

func (_c *MockRegisterUsecase_Register_Call) Run(run func(ctx context.Context, _a1 model.Register)) *MockRegisterUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Register))
	})
	return _c
}

func (_c *MockRegisterUsecase_Register_Call) Return(_a0 model.User, _a1 model.JWT, _a2 error) *MockRegisterUsecase_Register_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRegisterUsecase_Register_Call) RunAndReturn(run func(context.Context, model.Register) (model.User, model.JWT, error)) *MockRegisterUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterUsecase creates a new instance of MockRegisterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterUsecase {
	mock := &MockRegisterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
